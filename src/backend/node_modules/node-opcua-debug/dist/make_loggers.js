"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.make_warningLog = exports.make_errorLog = exports.messageLogger = exports.MessageLogger = exports.make_debugLog = exports.checkDebugFlag = exports.setDebugFlag = void 0;
/**
 * @module node-opcua-debug
 */
// tslint:disable:no-console
const events_1 = require("events");
const util_1 = require("util");
const chalk = require("chalk");
const debugFlags = {};
const _process = (typeof process === "object") ? process : { env: {} };
const sTraceFlag = _process.env && _process.env.DEBUG;
// istanbul ignore next
if (_process.env && false) {
    // this code can be activated to help detecting
    // when a external module overwrite one of the
    // environment variable that we may be using as well.
    const old = Object.assign({}, _process.env);
    const handler = {
        get: function (obj, prop) {
            return old[prop];
        },
        set: function (obj, prop, value) {
            console.log("setting process.env = prop " + prop);
            old[prop] = value;
            return true;
        }
    };
    _process.env = new Proxy(old, handler);
}
const maxLines = _process.env && _process.env.NODEOPCUA_DEBUG_MAXLINE_PER_MESSAGE
    ? parseInt(_process.env.NODEOPCUA_DEBUG_MAXLINE_PER_MESSAGE, 10)
    : 25;
function extractBasename(name) {
    if (!name) {
        return "";
    }
    // return basename(name).replace(/\.(js|ts)$/, "");
    return name.replace(/(.*[\\|/])?/g, "").replace(/\.(js|ts)$/, "");
}
function w(str, l) {
    return str.padEnd(l, " ").substring(0, l);
}
function setDebugFlag(scriptFullPath, flag) {
    const filename = extractBasename(scriptFullPath);
    if (sTraceFlag && sTraceFlag.length > 1 && flag) {
        const decoratedFilename = chalk.yellow(w(filename, 60));
        console.log(" Setting debug for ", decoratedFilename, " to ", (flag ? chalk.cyan : chalk.red)(flag.toString(), sTraceFlag));
    }
    debugFlags[filename] = flag;
}
exports.setDebugFlag = setDebugFlag;
function checkDebugFlag(scriptFullPath) {
    const filename = extractBasename(scriptFullPath);
    let doDebug = debugFlags[filename];
    if (sTraceFlag && !Object.prototype.hasOwnProperty.call(debugFlags, filename)) {
        doDebug = sTraceFlag.indexOf(filename) >= 0 || sTraceFlag.indexOf("ALL") >= 0;
        setDebugFlag(filename, doDebug);
    }
    return doDebug;
}
exports.checkDebugFlag = checkDebugFlag;
/**
 * file_line return a 51 character string
 * @param filename
 * @param callerLine
 */
function file_line(mode, filename, callerLine) {
    const d = new Date().toISOString().substring(11);
    if (mode === "W") {
        return chalk.bgCyan.white(w(d, 14) + ":" + w(filename, 30) + ":" + w(callerLine.toString(), 5));
    }
    else if (mode === "D") {
        return chalk.bgWhite.cyan(w(d, 14) + ":" + w(filename, 30) + ":" + w(callerLine.toString(), 5));
    }
    else {
        return chalk.bgRed.white(w(d, 14) + ":" + w(filename, 30) + ":" + w(callerLine.toString(), 5));
    }
}
const continuation = w(" ...                                                            ", 51);
function buildPrefix(mode) {
    const stack = new Error("").stack || "";
    // caller line number
    const l = stack.split("\n")[4].split(":");
    const callerLine = parseInt(l[l.length - 2], 10);
    const filename = extractBasename(l[l.length - 3]);
    return file_line(mode, filename, callerLine);
}
function dump(mode, args1) {
    const a2 = Object.values(args1);
    const output = (0, util_1.format)(...a2);
    let a1 = [buildPrefix(mode)];
    let i = 0;
    for (const line of output.split("\n")) {
        const lineArguments = [].concat(a1, [line]);
        console.log(...lineArguments);
        a1 = [continuation];
        i = i + 1;
        if (i > maxLines) {
            const a3 = a1.concat([` .... TRUNCATED ..... (NODEOPCUA_DEBUG_MAXLINE_PER_MESSAGE=${maxLines}`]);
            console.log(...a3);
            break;
        }
    }
    return output;
}
/**
 * @method make_debugLog
 * @param scriptFullPath:string
 * @return returns a  debugLog function that will write message to the console
 * if the DEBUG environment variable indicates that the provided source file shall display debug trace
 *
 */
function make_debugLog(scriptFullPath) {
    const filename = extractBasename(scriptFullPath);
    function debugLogFunc(...args) {
        if (debugFlags[filename]) {
            dump("D", args);
        }
    }
    return debugLogFunc;
}
exports.make_debugLog = make_debugLog;
class MessageLogger extends events_1.EventEmitter {
    constructor() {
        super();
    }
    on(eventName, eventHandler) {
        return super.on(eventName, eventHandler);
    }
}
exports.MessageLogger = MessageLogger;
exports.messageLogger = new MessageLogger();
function make_errorLog(context) {
    function errorLogFunc(...args) {
        const output = dump("E", args);
        exports.messageLogger.emit("errorMessage", output);
    }
    return errorLogFunc;
}
exports.make_errorLog = make_errorLog;
function make_warningLog(context) {
    function errorLogFunc(...args) {
        const output = dump("W", args);
        exports.messageLogger.emit("warningMessage", output);
    }
    return errorLogFunc;
}
exports.make_warningLog = make_warningLog;
//# sourceMappingURL=make_loggers.js.map