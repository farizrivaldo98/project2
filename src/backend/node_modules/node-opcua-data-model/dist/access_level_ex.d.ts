import { BinaryStream, OutputBinaryStream } from "node-opcua-binary-stream";
/**
 * from https://reference.opcfoundation.org/v104/Core/docs/Part3/8.58/:
 *
 * This is a subtype of the UInt32 DataType with the OptionSetValues Property defined.
 * It is used to indicate how the Value of a Variable can be accessed (read/write),
 * if it contains current and/or historic data and its atomicity.
 * The AccessLevelExType DataType is an extended version of the AccessLevelType DataType and
 * as such contains the 8 bits of the AccessLevelType as the first 8 bits.
 * The NonatomicRead, and NonatomicWrite Fields represent the atomicity of a Variable.
 *  In general Atomicity is expected of OPC UA read and write operations.
 * These Fields are used by systems, in particular hard-realtime controllers, which can not ensure atomicity.
 */
export declare enum AccessLevelExFlag {
    CurrentRead = 1,
    CurrentWrite = 2,
    HistoryRead = 4,
    HistoryWrite = 8,
    SemanticChange = 16,
    StatusWrite = 32,
    TimestampWrite = 64,
    NonatomicRead = 128,
    NonatomicWrite = 256,
    WriteFullArrayOnly = 512,
    NoSubDataTypes = 1024,
    NonVolatile = 2048,
    Constant = 4096,
    None = 2048
}
export declare function makeAccessLevelExFlag(str: string | number | null): AccessLevelExFlag;
export declare function randomAccessLevelEx(): AccessLevelExFlag;
export declare function accessLevelExFlagToString(accessLevelFlag: AccessLevelExFlag): string;
export declare function encodeAccessLevelExFlag(value: AccessLevelExFlag, stream: OutputBinaryStream): void;
export declare function decodeAccessLevelExFlag(stream: BinaryStream): AccessLevelExFlag;
