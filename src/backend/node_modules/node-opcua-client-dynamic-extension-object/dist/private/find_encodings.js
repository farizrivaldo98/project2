"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._findEncodings = void 0;
const node_opcua_data_model_1 = require("node-opcua-data-model");
const node_opcua_nodeid_1 = require("node-opcua-nodeid");
const node_opcua_pseudo_session_1 = require("node-opcua-pseudo-session");
function _findEncodings(session, dataTypeNodeId) {
    return __awaiter(this, void 0, void 0, function* () {
        const nodeToBrowse = {
            browseDirection: node_opcua_data_model_1.BrowseDirection.Forward,
            includeSubtypes: true,
            nodeClassMask: (0, node_opcua_data_model_1.makeNodeClassMask)("Object"),
            nodeId: dataTypeNodeId,
            referenceTypeId: (0, node_opcua_nodeid_1.resolveNodeId)("HasEncoding"),
            resultMask: (0, node_opcua_data_model_1.makeResultMask)("ReferenceType | IsForward | BrowseName | NodeClass | TypeDefinition")
        };
        const result = yield (0, node_opcua_pseudo_session_1.browseAll)(session, nodeToBrowse);
        const references = result.references || [];
        if (references.length === 0) {
            // xx throw new Error("Cannot find encodings on type " + dataTypeNodeId.toString() + " statusCode " + result.statusCode.toString());
        }
        const encodings = {
            dataTypeNodeId,
            binaryEncodingNodeId: new node_opcua_nodeid_1.NodeId(),
            jsonEncodingNodeId: new node_opcua_nodeid_1.NodeId(),
            xmlEncodingNodeId: new node_opcua_nodeid_1.NodeId()
        };
        for (const ref of references) {
            switch (ref.browseName.name) {
                case "Default Binary":
                    encodings.binaryEncodingNodeId = ref.nodeId;
                    break;
                case "Default XML":
                    encodings.xmlEncodingNodeId = ref.nodeId;
                    break;
                case "Default JSON":
                    encodings.jsonEncodingNodeId = ref.nodeId;
                    break;
                default:
                    console.log(" ignoring encoding ", ref.browseName.toString());
            }
        }
        return encodings;
    });
}
exports._findEncodings = _findEncodings;
//# sourceMappingURL=find_encodings.js.map