"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveDynamicExtensionObject = exports.resolveOpaqueStructureInExtentionObject = void 0;
const node_opcua_binary_stream_1 = require("node-opcua-binary-stream");
const node_opcua_extension_object_1 = require("node-opcua-extension-object");
const node_opcua_variant_1 = require("node-opcua-variant");
const node_opcua_debug_1 = require("node-opcua-debug");
const node_opcua_data_model_1 = require("node-opcua-data-model");
const populate_data_type_manager_104_1 = require("./private/populate_data_type_manager_104");
const warningLog = (0, node_opcua_debug_1.make_warningLog)(__filename);
function getOrExtractConstructor(session, binaryEncodingNodeId, dataTypeManager) {
    return __awaiter(this, void 0, void 0, function* () {
        const dataTypeFactory = dataTypeManager.getDataTypeFactoryForNamespace(binaryEncodingNodeId.namespace);
        const Constructor = dataTypeFactory.getConstructor(binaryEncodingNodeId);
        if (Constructor) {
            return Constructor;
        }
        if (binaryEncodingNodeId.namespace === 0) {
            throw new Error("Internal Error");
        }
        // need to extract it
        const browseResult = yield session.browse({
            nodeId: binaryEncodingNodeId,
            referenceTypeId: "HasEncoding",
            browseDirection: node_opcua_data_model_1.BrowseDirection.Inverse,
            includeSubtypes: false,
            nodeClassMask: node_opcua_data_model_1.NodeClassMask.DataType,
            resultMask: node_opcua_data_model_1.ResultMask.BrowseName
        });
        if (browseResult.statusCode.isNotGood() || browseResult.references.length !== 1) {
            throw new Error("browse failed");
        }
        const r = browseResult.references[0];
        const dataTypeNodeId = r.nodeId;
        if (dataTypeFactory.getStructureInfoForDataType(dataTypeNodeId)) {
            throw new Error("Internal Error: we are not expecting this dataType to be processed already " + dataTypeNodeId.toString());
        }
        yield (0, populate_data_type_manager_104_1.readDataTypeDefinitionAndBuildType)(session, dataTypeNodeId, r.browseName.name, dataTypeFactory, {});
        const structureInfo = dataTypeFactory.getStructureInfoForDataType(dataTypeNodeId);
        if (!structureInfo.constructor) {
            throw new Error("Cannot find constructor for abstract DataType");
        }
        return structureInfo.constructor;
    });
}
function resolveOpaqueStructureInExtentionObject(session, dataTypeManager, object) {
    return __awaiter(this, void 0, void 0, function* () {
        const schema = object.schema;
        function fixOpaqueStructureOnElement(element, field, data, args) {
            return __awaiter(this, void 0, void 0, function* () {
                if (element instanceof node_opcua_variant_1.Variant) {
                    yield resolveDynamicExtensionObject(session, element, dataTypeManager);
                    return element;
                }
                if (!(element instanceof node_opcua_extension_object_1.OpaqueStructure)) {
                    return element;
                }
                const variant = new node_opcua_variant_1.Variant({ dataType: node_opcua_variant_1.DataType.ExtensionObject, value: element });
                yield resolveDynamicExtensionObject(session, variant, dataTypeManager);
                return variant.value;
            });
        }
        function fixOpaqueStructure(object, field, data, args) {
            if (field.category === "complex" && !field.allowSubType) {
                return;
            }
            if (field.category === "basic" && field.fieldType !== "Variant") {
                return;
            }
            console.log("field", field.name, field.category, field.fieldType);
            const a = object[field.name];
            if (!a) {
                return;
            }
            if (field.isArray) {
                for (let i = 0; i < a.length; i++) {
                    const x = a[i];
                    promises.push((() => __awaiter(this, void 0, void 0, function* () {
                        a[i] = yield fixOpaqueStructureOnElement(x, field, data, args);
                    }))());
                }
            }
            else {
                promises.push((() => __awaiter(this, void 0, void 0, function* () {
                    object[field.name] = yield fixOpaqueStructureOnElement(a, field, data, args);
                }))());
            }
        }
        const promises = [];
        object.applyOnAllFields(fixOpaqueStructure, { dataTypeManager, promises });
        yield Promise.all(promises);
    });
}
exports.resolveOpaqueStructureInExtentionObject = resolveOpaqueStructureInExtentionObject;
// async function resolveInnerVariantType(session: IBasicSession, object: ExtensionObject, dataTypeManager: ExtraDataTypeManager) {
//     console.log("object = ", object.constructor.name);
//     const fields = object.schema.fields;
//     const _object = object as unknown as Record<string, unknown>;
//     for (const field of fields) {
//         console.log("field = ", field.name);
//         if (field.category !== "complex") continue;
//         const p = _object[field.name];
//         if (p === undefined || p === null) continue;
//         console.log("=>", field.name, (p as any).toString());
//         if (p instanceof ExtensionObject) {
//             resolveInnerVariantType(session, p, dataTypeManager);
//         }
//         if (p instanceof Variant && p.value instanceof OpaqueStructure) {
//             console.log("§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§");
//             p.value = resolveDynamicExtensionObjectV(session, p.value, dataTypeManager);
//         }
//     }
// }
function resolveDynamicExtensionObjectV(session, opaque, dataTypeManager) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const Constructor = yield getOrExtractConstructor(session, opaque.nodeId, dataTypeManager);
            const object = new Constructor();
            const stream = new node_opcua_binary_stream_1.BinaryStream(opaque.buffer);
            try {
                object.decode(stream);
                yield resolveOpaqueStructureInExtentionObject(session, dataTypeManager, object);
                return object;
            }
            catch (err) {
                warningLog("Constructor = ", Constructor.name);
                warningLog("opaqueStructure = ", (_a = opaque === null || opaque === void 0 ? void 0 : opaque.nodeId) === null || _a === void 0 ? void 0 : _a.toString());
                warningLog("opaqueStructure = ", (0, node_opcua_debug_1.hexDump)(opaque.buffer, 132, 100));
                warningLog((0, node_opcua_debug_1.hexDump)(opaque.buffer));
                warningLog("resolveDynamicExtensionObjectV err = ", err);
                // try again for debugging
                object.decode(stream);
                return opaque;
            }
        }
        catch (err) {
            warningLog("err", err);
            warningLog("opaqueStructure = ", opaque.nodeId.toString());
            warningLog("opaqueStructure = ", "0x" + (0, node_opcua_debug_1.hexDump)(opaque.buffer, 132, 100));
            warningLog((0, node_opcua_debug_1.hexDump)(opaque.buffer));
            warningLog(dataTypeManager.toString());
            throw err;
        }
    });
}
function resolveDynamicExtensionObject(session, variant, dataTypeManager) {
    return __awaiter(this, void 0, void 0, function* () {
        if (variant.dataType !== node_opcua_variant_1.DataType.ExtensionObject) {
            return;
        }
        if (variant.arrayType !== node_opcua_variant_1.VariantArrayType.Scalar) {
            if (variant.value instanceof Array) {
                for (let i = 0; i < variant.value.length; i++) {
                    if (variant.value[i] instanceof node_opcua_extension_object_1.OpaqueStructure) {
                        variant.value[i] = yield resolveDynamicExtensionObjectV(session, variant.value[i], dataTypeManager);
                    }
                }
            }
            return;
        }
        if (!(variant.value instanceof node_opcua_extension_object_1.OpaqueStructure)) {
            return;
        }
        variant.value = yield resolveDynamicExtensionObjectV(session, variant.value, dataTypeManager);
    });
}
exports.resolveDynamicExtensionObject = resolveDynamicExtensionObject;
//# sourceMappingURL=resolve_dynamic_extension_object.js.map