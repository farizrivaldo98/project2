"use strict";
/**
 * @module node-opcua-secure-channel
 */
// tslint:disable:variable-name
// tslint:disable:max-line-length
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageBuilder = exports.invalidPrivateKey = void 0;
const crypto_1 = require("crypto");
const util_1 = require("util");
const chalk = require("chalk");
const node_opcua_assert_1 = require("node-opcua-assert");
const node_opcua_basic_types_1 = require("node-opcua-basic-types");
const node_opcua_binary_stream_1 = require("node-opcua-binary-stream");
const node_opcua_crypto_1 = require("node-opcua-crypto");
const node_opcua_debug_1 = require("node-opcua-debug");
const node_opcua_factory_1 = require("node-opcua-factory");
const node_opcua_packet_analyzer_1 = require("node-opcua-packet-analyzer");
const node_opcua_service_secure_channel_1 = require("node-opcua-service-secure-channel");
const node_opcua_status_code_1 = require("node-opcua-status-code");
const node_opcua_transport_1 = require("node-opcua-transport");
const node_opcua_utils_1 = require("node-opcua-utils");
const node_opcua_chunkmanager_1 = require("node-opcua-chunkmanager");
const node_opcua_transport_2 = require("node-opcua-transport");
const secure_channel_service_1 = require("./secure_channel_service");
const security_policy_1 = require("./security_policy");
const debugLog = (0, node_opcua_debug_1.make_debugLog)(__filename);
const doDebug = (0, node_opcua_debug_1.checkDebugFlag)(__filename);
const warningLog = (0, node_opcua_debug_1.make_warningLog)(__filename);
const defaultObjectFactory = {
    constructObject(binaryEncodingNodeId) {
        return (0, node_opcua_factory_1.getStandardDataTypeFactory)().constructObject(binaryEncodingNodeId);
    },
    hasConstructor(binaryEncodingNodeId) {
        return (0, node_opcua_factory_1.getStandardDataTypeFactory)().hasConstructor(binaryEncodingNodeId);
    }
};
exports.invalidPrivateKey = (0, crypto_1.createPrivateKey)(`-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQC04ltMWV1bf/WLIWHp2BWe+6DHOzbTa9Xqxh7U+RFUBwyNFcNg
IpIWWRZQp1w3g5Gegj4aetJqBHjns9Rwu4iwl8Iyb0iL45pQ6/CDkC9uGWPiqqlN
hGadBcAG7Nwmkp8w0+VaOGACTfomSABMjdiqMS04M+wZH+sujmikBQwljwIDAQAB
AoGACwr6qemWwnxIYEsUcDNJ9p/EDAW4biXaNHAN99CQ10Fq6b4XZGoX4xdjPl9J
SPZWUIgBBJrU97X4L6UR5iP8zzjb3cpDJ+Pi9UQwHdRQIz4VlrqcNs2KkwRaMKgl
CR7thpI8XsNwjMLF8+eleg9wUmm0F6vQAXEAzjdrJQ1XGpECQQDdAP37TqxEAenf
r9VARue0GgIh6rfQjqVp3ZM1KKXbxnR8wklBQWdAghFNu6f3aJ9pcfDifxdxK4rq
tz8dBH5nAkEA0YcAfWKbB6SdGuFoWaLPlEN9mibaLllOocIC9NNZjvF3MF3NuvRd
CAx7P+wbmnG3FmZIqvXJwpFdXuMUYipWmQJAfrJp6F9izJ4YOJ9x7qZ3gL2ESXNp
K4wLclSPZuNFqmfsMfWjz2AyVD38s4aINYLqGKY0hXR8uOlQe1zQNs9zswJAB4uN
APbkDkpnPeiQEWpDf1tO0pZDlReyNTD/WkGiH/uiByPZnLnf/8IzTgH6nH0r0qqs
QzvGoDML4bbbrQ1JQQJBAJWb5pApj32rXPhQ+qMLVqy+CWJBWDd9sEuAYDhjIP1p
8B8zGo/PAP52VYDpy2YDDSfceMcAIhmsCjZv1AAP4eM=
-----END RSA PRIVATE KEY-----`);
let counter = 0;
/**
 * @class MessageBuilder
 * @extends MessageBuilderBase
 * @constructor
 *
 * @param options
 * @param options.securityMode {MessageSecurityMode} the security Mode
 * @param [options.objectFactory=factories] a object that provides a constructObject(id) method
 */
class MessageBuilder extends node_opcua_transport_1.MessageBuilderBase {
    constructor(options) {
        super(options);
        options = options || {};
        this.id = (options.name ? options.name : "Id") + counter++;
        this.privateKey = options.privateKey || exports.invalidPrivateKey;
        this.cryptoFactory = null;
        this.securityPolicy = security_policy_1.SecurityPolicy.Invalid; // not known yet
        this.securityMode = options.securityMode || node_opcua_service_secure_channel_1.MessageSecurityMode.Invalid; // not known yet
        this.objectFactory = options.objectFactory || defaultObjectFactory;
        (0, node_opcua_assert_1.assert)(typeof this.objectFactory.constructObject === "function", " the objectFactory must provide a constructObject method");
        this._previousSequenceNumber = -1; // means unknown
        (0, node_opcua_assert_1.assert)(isFinite(this._previousSequenceNumber));
        this._tokenStack = [];
    }
    setSecurity(securityMode, securityPolicy) {
        (0, node_opcua_assert_1.assert)(this.securityMode === node_opcua_service_secure_channel_1.MessageSecurityMode.Invalid, "security already set");
        this.securityPolicy = (0, security_policy_1.coerceSecurityPolicy)(securityPolicy);
        this.securityMode = (0, node_opcua_service_secure_channel_1.coerceMessageSecurityMode)(securityMode);
        (0, node_opcua_assert_1.assert)(this.securityPolicy !== security_policy_1.SecurityPolicy.Invalid);
        (0, node_opcua_assert_1.assert)(this.securityMode !== node_opcua_service_secure_channel_1.MessageSecurityMode.Invalid);
    }
    dispose() {
        super.dispose();
        // xx this.securityPolicy = undefined;
        // xx this.securityMode = null;
        // xx this.objectFactory = null;
        this.cryptoFactory = null;
        this.securityHeader = undefined;
        this._tokenStack = [];
        this.privateKey = exports.invalidPrivateKey;
    }
    pushNewToken(securityToken, derivedKeys) {
        (0, node_opcua_assert_1.assert)(Object.prototype.hasOwnProperty.call(securityToken, "tokenId"));
        // TODO: make sure this list doesn't grow indefinitely
        this._tokenStack = this._tokenStack || [];
        (0, node_opcua_assert_1.assert)(this._tokenStack.length === 0 || this._tokenStack[0].securityToken.tokenId !== securityToken.tokenId);
        this._tokenStack.push({
            derivedKeys,
            securityToken
        });
        /* istanbul ignore next */
        if (doDebug) {
            debugLog("id=", this.id, chalk.cyan("Pushing new token with id "), securityToken.tokenId, this.tokenIds());
        }
    }
    _read_headers(binaryStream) {
        if (!super._read_headers(binaryStream)) {
            return false;
        }
        // istanbul ignore next
        if (!this.messageHeader) {
            throw new Error("internal error");
        }
        try {
            (0, node_opcua_assert_1.assert)(binaryStream.length === 12);
            const msgType = this.messageHeader.msgType;
            if (msgType === "HEL" || msgType === "ACK") {
                this.securityPolicy = security_policy_1.SecurityPolicy.None;
            }
            else if (msgType === "ERR") {
                // extract Error StatusCode and additional message
                binaryStream.length = 8;
                const errorCode = (0, node_opcua_status_code_1.decodeStatusCode)(binaryStream);
                const message = (0, node_opcua_basic_types_1.decodeString)(binaryStream);
                /* istanbul ignore next */
                if (doDebug) {
                    debugLog(chalk.red.bold(" ERROR RECEIVED FROM SENDER"), chalk.cyan(errorCode.toString()), message);
                    debugLog((0, node_opcua_debug_1.hexDump)(binaryStream.buffer));
                }
                if (node_opcua_transport_2.doTraceChunk) {
                    warningLog((0, node_opcua_utils_1.timestamp)(), chalk.red("   >$$ "), chalk.red(this.messageHeader.msgType), chalk.red("nbChunk = " + this.messageChunks.length.toString().padStart(3)), chalk.red("totalLength = " + this.totalMessageSize.toString().padStart(8)), "l=", this.messageHeader.length.toString().padStart(6), errorCode.toString(), message);
                }
                return true;
            }
            else {
                this.securityHeader = (0, secure_channel_service_1.chooseSecurityHeader)(msgType);
                this.securityHeader.decode(binaryStream);
                if (msgType === "OPN") {
                    const asymmetricAlgorithmSecurityHeader = this.securityHeader;
                    this.securityPolicy = (0, security_policy_1.fromURI)(asymmetricAlgorithmSecurityHeader.securityPolicyUri);
                    this.cryptoFactory = (0, security_policy_1.getCryptoFactory)(this.securityPolicy);
                }
                if (!this._decrypt(binaryStream)) {
                    return false;
                }
                this.sequenceHeader = new node_opcua_chunkmanager_1.SequenceHeader();
                this.sequenceHeader.decode(binaryStream);
                /* istanbul ignore next */
                if (doDebug) {
                    debugLog(" Sequence Header", this.sequenceHeader);
                }
                if (node_opcua_transport_2.doTraceChunk) {
                    console.log(chalk.cyan((0, node_opcua_utils_1.timestamp)()), chalk.green("   >$$ "), chalk.green(this.messageHeader.msgType), chalk.green("nbChunk = " + this.messageChunks.length.toString().padStart(3)), chalk.green("totalLength = " + this.totalMessageSize.toString().padStart(8)), "l=", this.messageHeader.length.toString().padStart(6), "s=", this.sequenceHeader.sequenceNumber.toString().padEnd(4), "r=", this.sequenceHeader.requestId.toString().padEnd(4));
                }
                this._validateSequenceNumber(this.sequenceHeader.sequenceNumber);
            }
            return true;
        }
        catch (err) {
            warningLog(chalk.red("Error"), err.message);
            return false;
        }
    }
    _decodeMessageBody(fullMessageBody) {
        // istanbul ignore next
        if (!this.messageHeader || !this.securityHeader) {
            return this._report_error(node_opcua_transport_1.StatusCodes2.BadTcpInternalError, "internal error");
        }
        const msgType = this.messageHeader.msgType;
        if (msgType === "HEL" || msgType === "ACK" || msgType === "ERR") {
            // invalid message type
            return this._report_error(node_opcua_transport_1.StatusCodes2.BadTcpMessageTypeInvalid, "Invalid message type ( HEL/ACK/ERR )");
        }
        if (msgType === "CLO" && fullMessageBody.length === 0 && this.sequenceHeader) {
            // The Client closes the connection by sending a CloseSecureChannel request and closing the
            // socket gracefully. When the Server receives this Message, it shall release all resources
            // allocated for the channel. The body of the CloseSecureChannel request is empty. The Server
            // does not send a CloseSecureChannel response.
            const objMessage1 = new node_opcua_service_secure_channel_1.CloseSecureChannelRequest();
            this.emit("message", objMessage1, msgType, this.sequenceHeader.requestId, this.channelId);
            return true;
        }
        const binaryStream = new node_opcua_binary_stream_1.BinaryStream(fullMessageBody);
        // read expandedNodeId:
        let id;
        try {
            id = (0, node_opcua_basic_types_1.decodeExpandedNodeId)(binaryStream);
        }
        catch (err) {
            // this may happen if the message is not well formed or has been altered
            // we better off reporting an error and abort the communication
            return this._report_error(node_opcua_transport_1.StatusCodes2.BadTcpInternalError, util_1.types.isNativeError(err) ? err.message : " err");
        }
        if (!this.objectFactory.hasConstructor(id)) {
            // the datatype NodeId is not supported by the server and unknown in the factory
            // we better off reporting an error and abort the communication
            return this._report_error(node_opcua_status_code_1.StatusCodes.BadNotSupported, "cannot construct object with nodeID " + id.toString());
        }
        // construct the object
        const objMessage = this.objectFactory.constructObject(id);
        if (!objMessage) {
            return this._report_error(node_opcua_status_code_1.StatusCodes.BadNotSupported, "cannot construct object with nodeID " + id);
        }
        else {
            if (this._safe_decode_message_body(fullMessageBody, objMessage, binaryStream)) {
                /* istanbul ignore next */
                if (doDebug) {
                    const o = objMessage;
                    const requestHandle = o.responseHeader
                        ? o.responseHeader.requestHandle
                        : o.requestHeader
                            ? o.requestHeader.requestHandle
                            : "";
                    debugLog(this.id, "message size =", ("" + this.totalMessageSize).padEnd(8), " body size   =", ("" + this.totalBodySize).padEnd(8), " requestHandle = ", requestHandle, objMessage.constructor.name);
                }
                try {
                    /**
                     * notify the observers that a full message has been received
                     * @event message
                     * @param  objMessage the decoded message object
                     * @param  msgType the message type ( "HEL","ACK","OPN","CLO" or "MSG" )
                     * @param  the request Id
                     */
                    this.emit("message", objMessage, msgType, this.sequenceHeader.requestId, this.channelId);
                }
                catch (err) {
                    // this code catches a uncaught exception somewhere in one of the event handler
                    // this indicates a bug in the code that uses this class
                    // please check the stack trace to find the problem
                    /* istanbul ignore next */
                    if (doDebug) {
                        debugLog(err);
                    }
                    warningLog(chalk.red("MessageBuilder : ERROR DETECTED IN 'message' event handler"));
                    if (util_1.types.isNativeError(err)) {
                        warningLog(err.message);
                        warningLog(err.stack);
                    }
                }
            }
            else {
                warningLog("cannot decode message  for valid object of type " + id.toString() + " " + objMessage.constructor.name);
                this.emit("invalid_message", objMessage);
                debugLog(this.id, "message size =", ("" + this.totalMessageSize).padEnd(8), " body size   =", ("" + this.totalBodySize).padEnd(8), objMessage.constructor.name);
                console.log(objMessage.toString());
                // we don't report an error here, we just ignore the message
                return false; // this._report_error(message);
            }
        }
        return true;
    }
    _validateSequenceNumber(sequenceNumber) {
        // checking that sequenceNumber is increasing
        (0, node_opcua_assert_1.assert)(isFinite(this._previousSequenceNumber));
        (0, node_opcua_assert_1.assert)(isFinite(sequenceNumber) && sequenceNumber >= 0);
        let expectedSequenceNumber;
        if (this._previousSequenceNumber !== -1) {
            expectedSequenceNumber = this._previousSequenceNumber + 1;
            if (expectedSequenceNumber !== sequenceNumber) {
                const errMessage = "Invalid Sequence Number found ( expected " + expectedSequenceNumber + ", got " + sequenceNumber + ")";
                /* istanbul ignore next */
                debugLog(chalk.red.bold(errMessage));
                /**
                 * notify the observers that a message with an invalid sequence number has been received.
                 * @event invalid_sequence_number
                 * @param  expected sequence Number
                 * @param  actual sequence Number
                 */
                this.emit("invalid_sequence_number", expectedSequenceNumber, sequenceNumber);
            }
            // todo : handle the case where sequenceNumber wraps back to < 1024
        }
        /* istanbul ignore next */
        if (doDebug) {
            debugLog(chalk.yellow.bold("" + this.id + " Sequence Number = "), sequenceNumber);
        }
        this._previousSequenceNumber = sequenceNumber;
    }
    // eslint-disable-next-line max-statements
    _decrypt_OPN(binaryStream) {
        (0, node_opcua_assert_1.assert)(this.securityPolicy !== security_policy_1.SecurityPolicy.None);
        (0, node_opcua_assert_1.assert)(this.securityPolicy !== security_policy_1.SecurityPolicy.Invalid);
        (0, node_opcua_assert_1.assert)(this.securityMode !== node_opcua_service_secure_channel_1.MessageSecurityMode.None);
        (0, node_opcua_assert_1.assert)(this.securityHeader instanceof node_opcua_service_secure_channel_1.AsymmetricAlgorithmSecurityHeader);
        const asymmetricAlgorithmSecurityHeader = this.securityHeader;
        /* istanbul ignore next */
        if (doDebug) {
            debugLog("securityHeader = {");
            debugLog("             securityPolicyId: ", asymmetricAlgorithmSecurityHeader.securityPolicyUri);
            debugLog("             senderCertificate: ", (0, node_opcua_crypto_1.makeSHA1Thumbprint)(asymmetricAlgorithmSecurityHeader.senderCertificate).toString("hex"));
            debugLog("};");
        }
        if (doDebug) {
            // OpcUA part 2 V 1.02 page 15
            // 4.11 OPC UA Security Related Services
            // [...]
            // The OPC UA Client sends its Public Key in a Digital Certificate and secret information with the
            // OpenSecureChannel service Message to the Server. This Message is secured by applying
            // Asymmetric Encryption with the Server's Public Key and by generating Asymmetric Signatures with
            // the Client's Private Key. However the Digital Certificate is sent unencrypted so that the receiver can
            // use it to verify the Asymmetric Signature.
            // [...]
            //
            /* istanbul ignore next */
            debugLog(chalk.cyan("EN------------------------------"));
            // xx debugLog(hexDump(binaryStream.buffer, 32, 0xFFFFFFFF));
            debugLog("---------------------- SENDER CERTIFICATE");
            debugLog("thumbprint ", (0, node_opcua_crypto_1.makeSHA1Thumbprint)(asymmetricAlgorithmSecurityHeader.senderCertificate).toString("hex"));
        }
        if (node_opcua_transport_2.doTraceChunk) {
            const thumb = (0, node_opcua_crypto_1.makeSHA1Thumbprint)(asymmetricAlgorithmSecurityHeader.senderCertificate).toString("hex");
            warningLog((0, node_opcua_utils_1.timestamp)(), ` >$$ securityPolicyId:  ${asymmetricAlgorithmSecurityHeader.securityPolicyUri} ${thumb} `);
        }
        if (!this.cryptoFactory) {
            warningLog(" Security Policy " + this.securityPolicy + " is not implemented yet");
            return false;
        }
        // The message has been signed  with sender private key and has been encrypted with receiver public key.
        // We shall decrypt it with the receiver private key.
        const buf = binaryStream.buffer.subarray(binaryStream.length);
        if (asymmetricAlgorithmSecurityHeader.receiverCertificateThumbprint) {
            // this mean that the message has been encrypted ....
            (0, node_opcua_assert_1.assert)(this.privateKey !== exports.invalidPrivateKey, "expecting a valid private key");
            try {
                const decryptedBuffer = this.cryptoFactory.asymmetricDecrypt(buf, this.privateKey);
                // replace decrypted buffer in initial buffer
                decryptedBuffer.copy(binaryStream.buffer, binaryStream.length);
                // adjust length
                binaryStream.buffer = binaryStream.buffer.subarray(0, binaryStream.length + decryptedBuffer.length);
            }
            catch (err) {
                warningLog("Cannot decrypt OPN package");
                // Cannot asymetricaly decrypt, may be the certificate used by the other party to encrypt
                // this package is wrong
                return false;
            }
            /* istanbul ignore next */
            if (doDebug) {
                debugLog(chalk.cyan("DE-----------------------------"));
                // debugLog(hexDump(binaryStream.buffer));
                debugLog(chalk.cyan("-------------------------------"));
                const thumbprint = (0, node_opcua_crypto_1.makeSHA1Thumbprint)(asymmetricAlgorithmSecurityHeader.senderCertificate);
                debugLog("Certificate thumbprint:", thumbprint.toString("hex"));
            }
        }
        const cert = (0, node_opcua_crypto_1.exploreCertificateInfo)(asymmetricAlgorithmSecurityHeader.senderCertificate);
        // then verify the signature
        const signatureLength = cert.publicKeyLength; // 1024 bits = 128Bytes or 2048=256Bytes or 3072 or 4096
        (0, node_opcua_assert_1.assert)(signatureLength === 128 || signatureLength === 256 || signatureLength === 384 || signatureLength === 512);
        const chunk = binaryStream.buffer;
        const signatureIsOK = (0, security_policy_1.asymmetricVerifyChunk)(this.cryptoFactory, chunk, asymmetricAlgorithmSecurityHeader.senderCertificate);
        if (!signatureIsOK) {
            /* istanbul ignore next */
            if (doDebug) {
                debugLog((0, node_opcua_debug_1.hexDump)(binaryStream.buffer));
                warningLog("Sign and Encrypt asymmetricVerify : Invalid packet signature");
            }
            return false;
        }
        // remove signature
        binaryStream.buffer = (0, node_opcua_crypto_1.reduceLength)(binaryStream.buffer, signatureLength);
        // remove padding
        if (asymmetricAlgorithmSecurityHeader.receiverCertificateThumbprint) {
            binaryStream.buffer = (0, node_opcua_crypto_1.removePadding)(binaryStream.buffer);
        }
        return true; // success
    }
    tokenIds() {
        return this._tokenStack.map((a) => a.securityToken.tokenId);
    }
    _select_matching_token(tokenId) {
        /* istanbul ignore next */
        if (doDebug) {
            debugLog("id=", this.id, " ", chalk.yellow("_select_matching_token : searching token "), tokenId, "length = ", this._tokenStack.length, this.tokenIds());
        }
        // this method select the security token matching the provided tokenId
        // it also get rid of older security token
        let gotNewToken = false;
        while (this._tokenStack.length) {
            const firstToken = this._tokenStack[0];
            if (firstToken.securityToken.tokenId === tokenId) {
                if (gotNewToken) {
                    this.emit("new_token", tokenId);
                }
                /* istanbul ignore next */
                if (doDebug) {
                    debugLog("id=", this.id, chalk.red(" found token"), gotNewToken, firstToken.securityToken.tokenId, this.tokenIds());
                }
                return firstToken;
            }
            // remove first
            this._tokenStack.shift();
            /* istanbul ignore next */
            if (doDebug) {
                debugLog("id=", this.id, "Remove first token ", firstToken.securityToken.tokenId, this.tokenIds());
            }
            gotNewToken = true;
        }
        /* istanbul ignore next */
        if (doDebug) {
            debugLog("id=", this.id, " Cannot find token ", tokenId);
        }
        return null;
    }
    _decrypt_MSG(binaryStream) {
        // istanbul ignore next
        if (!(this.securityHeader instanceof secure_channel_service_1.SymmetricAlgorithmSecurityHeader)) {
            throw new Error("Internal error : expecting a SymmetricAlgorithmSecurityHeader");
        }
        (0, node_opcua_assert_1.assert)(this.securityMode !== node_opcua_service_secure_channel_1.MessageSecurityMode.None);
        (0, node_opcua_assert_1.assert)(this.securityMode !== node_opcua_service_secure_channel_1.MessageSecurityMode.Invalid);
        (0, node_opcua_assert_1.assert)(this.securityPolicy !== security_policy_1.SecurityPolicy.None);
        (0, node_opcua_assert_1.assert)(this.securityPolicy !== security_policy_1.SecurityPolicy.Invalid);
        const symmetricAlgorithmSecurityHeader = this.securityHeader;
        // Check  security token
        // securityToken may have been renewed
        const securityTokenData = this._select_matching_token(symmetricAlgorithmSecurityHeader.tokenId);
        if (!securityTokenData) {
            if (doDebug) {
                debugLog("Security token data for token " + symmetricAlgorithmSecurityHeader.tokenId + " doesn't exist");
            }
            return false;
        }
        (0, node_opcua_assert_1.assert)(Object.prototype.hasOwnProperty.call(securityTokenData, "derivedKeys"));
        // SecurityToken may have expired, in this case the MessageBuilder shall reject the message
        if (securityTokenData.securityToken.expired) {
            debugLog("Security token has expired : tokenId " + securityTokenData.securityToken.tokenId);
            return false;
        }
        // We shall decrypt it with the receiver private key.
        const buf = binaryStream.buffer.subarray(binaryStream.length);
        const derivedKeys = securityTokenData.derivedKeys;
        // istanbul ignore next
        if (!derivedKeys || derivedKeys.signatureLength === 0) {
            return false;
        }
        if (this.securityMode === node_opcua_service_secure_channel_1.MessageSecurityMode.SignAndEncrypt) {
            const decryptedBuffer = (0, node_opcua_crypto_1.decryptBufferWithDerivedKeys)(buf, derivedKeys);
            // replace decrypted buffer in initial buffer
            decryptedBuffer.copy(binaryStream.buffer, binaryStream.length);
            // adjust length
            binaryStream.buffer = binaryStream.buffer.subarray(0, binaryStream.length + decryptedBuffer.length);
            /* istanbul ignore next */
            if (doDebug) {
                debugLog(chalk.cyan("DE-----------------------------"));
                debugLog((0, node_opcua_debug_1.hexDump)(binaryStream.buffer));
                debugLog(chalk.cyan("-------------------------------"));
            }
        }
        // now check signature ....
        const chunk = binaryStream.buffer;
        const signatureIsOK = (0, node_opcua_crypto_1.verifyChunkSignatureWithDerivedKeys)(chunk, derivedKeys);
        if (!signatureIsOK) {
            debugLog("_decrypt_MSG : Sign and Encrypt : Invalid packet signature");
            return false;
        }
        // remove signature
        binaryStream.buffer = (0, node_opcua_crypto_1.reduceLength)(binaryStream.buffer, derivedKeys.signatureLength);
        if (this.securityMode === node_opcua_service_secure_channel_1.MessageSecurityMode.SignAndEncrypt) {
            // remove padding
            binaryStream.buffer = (0, node_opcua_crypto_1.removePadding)(binaryStream.buffer);
        }
        return true;
    }
    _decrypt(binaryStream) {
        // istanbul ignore next
        if (!this.messageHeader) {
            throw new Error("internal error");
        }
        if (this.securityPolicy === security_policy_1.SecurityPolicy.Invalid) {
            // this._report_error("SecurityPolicy");
            // return false;
            return true;
        }
        const msgType = this.messageHeader.msgType;
        // check if security is active or not
        if (this.securityPolicy === security_policy_1.SecurityPolicy.None) {
            this.securityMode = node_opcua_service_secure_channel_1.MessageSecurityMode.None;
            (0, node_opcua_assert_1.assert)(this.securityMode === node_opcua_service_secure_channel_1.MessageSecurityMode.None, "expecting securityMode = None when securityPolicy is None");
            return true; // nothing to do
        }
        (0, node_opcua_assert_1.assert)(this.securityMode !== node_opcua_service_secure_channel_1.MessageSecurityMode.None);
        if (msgType === "OPN") {
            return this._decrypt_OPN(binaryStream);
        }
        else {
            return this._decrypt_MSG(binaryStream);
        }
    }
    _safe_decode_message_body(fullMessageBody, objMessage, binaryStream) {
        try {
            // de-serialize the object from the binary stream
            const options = this.objectFactory;
            objMessage.decode(binaryStream, options);
        }
        catch (err) {
            if (util_1.types.isNativeError(err)) {
                warningLog("Decode message error : ", err.message);
                // istanbul ignore next
                if (doDebug) {
                    debugLog(err.stack);
                    debugLog((0, node_opcua_debug_1.hexDump)(fullMessageBody));
                    (0, node_opcua_packet_analyzer_1.analyseExtensionObject)(fullMessageBody, 0, 0);
                    debugLog(" ---------------- block");
                    let i = 0;
                    this.messageChunks.forEach((messageChunk) => {
                        debugLog(" ---------------- chunk i=", i++);
                        debugLog((0, node_opcua_debug_1.hexDump)(messageChunk));
                    });
                }
            }
            return false;
        }
        return true;
    }
}
exports.MessageBuilder = MessageBuilder;
//# sourceMappingURL=message_builder.js.map