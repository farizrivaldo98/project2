"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateAddressSpaceRaw = void 0;
const node_opcua_debug_1 = require("node-opcua-debug");
const adjust_namespace_array_1 = require("../../src/nodeset_tools/adjust_namespace_array");
const load_nodeset2_1 = require("./load_nodeset2");
const doDebug = (0, node_opcua_debug_1.checkDebugFlag)(__filename);
const debugLog = (0, node_opcua_debug_1.make_debugLog)(__filename);
const errorLog = (0, node_opcua_debug_1.make_errorLog)(__filename);
/**
 * @param addressSpace the addressSpace to populate
 * @xmlFiles: a lis of xml files
 * @param xmlLoader - a helper function to return the content of the xml file
 */
function generateAddressSpaceRaw(addressSpace, xmlFiles, xmlLoader, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const nodesetLoader = new load_nodeset2_1.NodeSetLoader(addressSpace, options);
        if (!Array.isArray(xmlFiles)) {
            xmlFiles = [xmlFiles];
        }
        for (let index = 0; index < xmlFiles.length; index++) {
            const xmlData = yield xmlLoader(xmlFiles[index]);
            try {
                yield nodesetLoader.addNodeSetAsync(xmlData);
            }
            catch (err) {
                errorLog("generateAddressSpace:  Loading xml file ", xmlFiles[index], " failed with error ", err.message);
                throw err;
            }
        }
        yield nodesetLoader.terminateAsync();
        (0, adjust_namespace_array_1.adjustNamespaceArray)(addressSpace);
        // however process them in series
    });
}
exports.generateAddressSpaceRaw = generateAddressSpaceRaw;
//# sourceMappingURL=generateAddressSpaceRaw.js.map