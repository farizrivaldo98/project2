"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureDatatypeExtractedWithCallback = exports.ensureDatatypeExtracted = void 0;
const node_opcua_client_dynamic_extension_object_1 = require("node-opcua-client-dynamic-extension-object");
const node_opcua_debug_1 = require("node-opcua-debug");
const node_opcua_factory_1 = require("node-opcua-factory");
const pseudo_session_1 = require("../pseudo_session");
const debugLog = (0, node_opcua_debug_1.make_debugLog)(__filename);
function fixDefinition103(addressSpace, namespaceArray, dataTypeManager) {
    // fix datatype _getDefinition();
    for (let namespaceIndex = 1; namespaceIndex < namespaceArray.length; namespaceIndex++) {
        const df = dataTypeManager.getDataTypeFactory(namespaceIndex);
        for (const s of df.getStructureIterator()) {
            const dataType = addressSpace.findDataType(s.schema.dataTypeNodeId);
            if (!s.constructor) {
                continue;
            }
            if (!dataType) {
                continue;
            }
            if (dataType.$partialDefinition && dataType.$partialDefinition.length) {
                continue;
            }
            // debugLog(" Explorartion", dataType.browseName.toString());
            if (!dataType.$partialDefinition || (dataType.$partialDefinition.length === 0 && s.schema.fields.length > 0)) {
                const sd = (0, node_opcua_client_dynamic_extension_object_1.convertStructureTypeSchemaToStructureDefinition)(s.schema);
                dataType.$partialDefinition = sd.fields || undefined;
            }
        }
    }
}
function ensureDatatypeExtracted(addressSpace) {
    return __awaiter(this, void 0, void 0, function* () {
        const addressSpacePriv = addressSpace;
        if (!addressSpacePriv.$$extraDataTypeManager) {
            const dataTypeManager = new node_opcua_client_dynamic_extension_object_1.ExtraDataTypeManager();
            const namespaceArray = addressSpace.getNamespaceArray().map((n) => n.namespaceUri);
            debugLog("INamespace Array = ", namespaceArray.join("\n                   "));
            dataTypeManager.setNamespaceArray(namespaceArray);
            addressSpacePriv.$$extraDataTypeManager = dataTypeManager;
            for (let namespaceIndex = 1; namespaceIndex < namespaceArray.length; namespaceIndex++) {
                const dataTypeFactory1 = new node_opcua_factory_1.DataTypeFactory([(0, node_opcua_factory_1.getStandardDataTypeFactory)()]);
                dataTypeManager.registerDataTypeFactory(namespaceIndex, dataTypeFactory1);
            }
            // inject simple types
            // now extract structure and enumeration from old form
            const session = new pseudo_session_1.PseudoSession(addressSpace);
            yield (0, node_opcua_client_dynamic_extension_object_1.populateDataTypeManager)(session, dataTypeManager);
            // turn old <=103 structure to have valid DataTypeDefinition
            fixDefinition103(addressSpace, namespaceArray, dataTypeManager);
        }
        return addressSpacePriv.$$extraDataTypeManager;
    });
}
exports.ensureDatatypeExtracted = ensureDatatypeExtracted;
function ensureDatatypeExtractedWithCallback(addressSpace, callback) {
    ensureDatatypeExtracted(addressSpace)
        .then((result) => callback(null, result))
        .catch((err) => callback(err));
}
exports.ensureDatatypeExtractedWithCallback = ensureDatatypeExtractedWithCallback;
//# sourceMappingURL=ensure_datatype_extracted.js.map