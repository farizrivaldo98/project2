"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.callMethodHelper = void 0;
/**
 * @module node-opcua-address-space
 */
const node_opcua_assert_1 = require("node-opcua-assert");
const node_opcua_data_model_1 = require("node-opcua-data-model");
const node_opcua_nodeid_1 = require("node-opcua-nodeid");
const node_opcua_status_code_1 = require("node-opcua-status-code");
const argument_list_1 = require("./argument_list");
const resolve_opaque_on_address_space_1 = require("./resolve_opaque_on_address_space");
function callMethodHelper(context, addressSpace, callMethodRequest, callback) {
    const objectId = callMethodRequest.objectId;
    const methodId = callMethodRequest.methodId;
    const inputArguments = callMethodRequest.inputArguments || [];
    (0, node_opcua_assert_1.assert)(objectId instanceof node_opcua_nodeid_1.NodeId);
    (0, node_opcua_assert_1.assert)(methodId instanceof node_opcua_nodeid_1.NodeId);
    const object = addressSpace.findNode(objectId);
    if (!object) {
        return callback(null, { statusCode: node_opcua_status_code_1.StatusCodes.BadNodeIdUnknown });
    }
    if (object.nodeClass !== node_opcua_data_model_1.NodeClass.Object && object.nodeClass !== node_opcua_data_model_1.NodeClass.ObjectType) {
        return callback(null, { statusCode: node_opcua_status_code_1.StatusCodes.BadNodeIdInvalid });
    }
    const methodObj = addressSpace.findNode(methodId);
    if (!methodObj) {
        return callback(null, { statusCode: node_opcua_status_code_1.StatusCodes.BadNodeIdUnknown });
    }
    if (methodObj.nodeClass !== node_opcua_data_model_1.NodeClass.Method) {
        return callback(null, { statusCode: node_opcua_status_code_1.StatusCodes.BadNodeIdInvalid });
    }
    const response1 = (0, argument_list_1.getMethodDeclaration_ArgumentList)(addressSpace, objectId, methodId);
    if (response1.statusCode.isNotGood()) {
        return callback(null, { statusCode: response1.statusCode });
    }
    const methodDeclaration = response1.methodDeclaration;
    // verify input Parameters
    const methodInputArguments = methodDeclaration.getInputArguments();
    const response = (0, argument_list_1.verifyArguments_ArgumentList)(addressSpace, methodInputArguments, inputArguments);
    if (response.statusCode.isNotGood()) {
        return callback(null, response);
    }
    (0, resolve_opaque_on_address_space_1.resolveOpaqueOnAddressSpace)(addressSpace, inputArguments)
        .then(() => {
        methodObj.execute(object, inputArguments, context, (err, callMethodResponse) => {
            var _a;
            /* istanbul ignore next */
            if (err) {
                return callback(err);
            }
            if (!callMethodResponse) {
                return callback(new Error("internal Error"));
            }
            callMethodResponse.inputArgumentResults =
                callMethodResponse.inputArgumentResults || response.inputArgumentResults || [];
            (0, node_opcua_assert_1.assert)(callMethodResponse.statusCode);
            if ((_a = callMethodResponse.statusCode) === null || _a === void 0 ? void 0 : _a.isGood()) {
                (0, node_opcua_assert_1.assert)(Array.isArray(callMethodResponse.outputArguments));
            }
            (0, node_opcua_assert_1.assert)(Array.isArray(callMethodResponse.inputArgumentResults));
            (0, node_opcua_assert_1.assert)(callMethodResponse.inputArgumentResults.length === methodInputArguments.length);
            const outputArguments = callMethodResponse.outputArguments || [];
            (0, resolve_opaque_on_address_space_1.resolveOpaqueOnAddressSpace)(addressSpace, outputArguments)
                .then(() => callback(null, callMethodResponse))
                .catch(callback);
        });
    })
        .catch((err) => callback(err));
}
exports.callMethodHelper = callMethodHelper;
//# sourceMappingURL=call_helpers.js.map