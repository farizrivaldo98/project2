"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveOpaqueOnAddressSpace = void 0;
const node_opcua_client_dynamic_extension_object_1 = require("node-opcua-client-dynamic-extension-object");
const node_opcua_variant_1 = require("node-opcua-variant");
const pseudo_session_1 = require("../pseudo_session");
const ensure_datatype_extracted_1 = require("../loader/ensure_datatype_extracted");
function resolveOpaqueOnAddressSpace(addressSpace, variants) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!variants) {
            return;
        }
        const session = new pseudo_session_1.PseudoSession(addressSpace);
        const extraDataTypeManager = yield (0, ensure_datatype_extracted_1.ensureDatatypeExtracted)(addressSpace);
        if (variants instanceof node_opcua_variant_1.Variant) {
            yield (0, node_opcua_client_dynamic_extension_object_1.resolveDynamicExtensionObject)(session, variants, extraDataTypeManager);
            return;
        }
        // resolve opaque data structure from inputArguments
        for (const variant of variants) {
            if (variant) {
                yield (0, node_opcua_client_dynamic_extension_object_1.resolveDynamicExtensionObject)(session, variant, extraDataTypeManager);
            }
        }
    });
}
exports.resolveOpaqueOnAddressSpace = resolveOpaqueOnAddressSpace;
//# sourceMappingURL=resolve_opaque_on_address_space.js.map