"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateAddressSpace = exports.readNodeSet2XmlFile = void 0;
const fs = require("fs");
const util_1 = require("util");
const node_opcua_debug_1 = require("node-opcua-debug");
const __1 = require("..");
const doDebug = (0, node_opcua_debug_1.checkDebugFlag)(__filename);
const debugLog = (0, node_opcua_debug_1.make_debugLog)(__filename);
const errorLog = (0, node_opcua_debug_1.make_errorLog)(__filename);
function readNodeSet2XmlFile(xmlFile) {
    return __awaiter(this, void 0, void 0, function* () {
        // istanbul ignore next
        if (!fs.existsSync(xmlFile)) {
            const msg = "[NODE-OPCUA-E02] generateAddressSpace : cannot find nodeset2 xml file at " + xmlFile;
            errorLog(msg);
            throw new Error(msg);
        }
        debugLog(" parsing ", xmlFile);
        const xmlData = yield fs.promises.readFile(xmlFile, "utf-8");
        return xmlData;
    });
}
exports.readNodeSet2XmlFile = readNodeSet2XmlFile;
function generateAddressSpace(...args) {
    const addressSpace = args[0];
    const xmlFiles = args[1];
    if (args.length === 4) {
        const options = args[2];
        const callback = args[3];
        (0, util_1.callbackify)(__1.generateAddressSpaceRaw)(addressSpace, xmlFiles, readNodeSet2XmlFile, options || {}, callback);
    }
    else {
        const options = {};
        const callback = args[2];
        (0, util_1.callbackify)(__1.generateAddressSpaceRaw)(addressSpace, xmlFiles, readNodeSet2XmlFile, options, callback);
    }
}
exports.generateAddressSpace = generateAddressSpace;
// tslint:disable:no-var-requires
// tslint:disable:max-line-length
const thenify = require("thenify");
module.exports.generateAddressSpace = thenify.withCallback(module.exports.generateAddressSpace);
//# sourceMappingURL=generate_address_space.js.map