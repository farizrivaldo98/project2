"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMonitoredItemsLimit = void 0;
/**
 * @module node-opcua-pseudo-session
 */
const node_opcua_service_subscription_1 = require("node-opcua-service-subscription");
const node_opcua_status_code_1 = require("node-opcua-status-code");
function createMonitoredItemsLimit(maxMonitoredItemsPerCall, session, createMonitoredItemsRequest) {
    return __awaiter(this, void 0, void 0, function* () {
        const _session2 = session;
        if (!createMonitoredItemsRequest.itemsToCreate || createMonitoredItemsRequest.itemsToCreate.length === 0) {
            return new node_opcua_service_subscription_1.CreateMonitoredItemsResponse({
                responseHeader: {
                    serviceResult: node_opcua_status_code_1.StatusCodes.Good
                },
                results: []
            });
        }
        if (maxMonitoredItemsPerCall <= 0 ||
            !createMonitoredItemsRequest.itemsToCreate ||
            createMonitoredItemsRequest.itemsToCreate.length <= maxMonitoredItemsPerCall) {
            return _session2.createMonitoredItems(createMonitoredItemsRequest);
        }
        const n = [...(createMonitoredItemsRequest.itemsToCreate || [])];
        const response = new node_opcua_service_subscription_1.CreateMonitoredItemsResponse({
            diagnosticInfos: null,
            results: []
        });
        do {
            const c = n.splice(0, maxMonitoredItemsPerCall);
            const cmi = new node_opcua_service_subscription_1.CreateMonitoredItemsRequest({
                subscriptionId: createMonitoredItemsRequest.subscriptionId,
                timestampsToReturn: createMonitoredItemsRequest.timestampsToReturn,
                itemsToCreate: c
            });
            const r = yield _session2.createMonitoredItems(cmi);
            for (const i of r.results) {
                response.results.push(i);
            }
        } while (n.length);
        return response;
    });
}
exports.createMonitoredItemsLimit = createMonitoredItemsLimit;
//# sourceMappingURL=create_monitored_items_limit.js.map