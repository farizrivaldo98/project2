"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findBasicDataType = exports.findSuperType = void 0;
const node_opcua_nodeid_1 = require("node-opcua-nodeid");
const node_opcua_service_browse_1 = require("node-opcua-service-browse");
const node_opcua_variant_1 = require("node-opcua-variant");
const node_opcua_constants_1 = require("node-opcua-constants");
const node_opcua_data_model_1 = require("node-opcua-data-model");
const resultMask = (0, node_opcua_data_model_1.makeResultMask)("ReferenceType");
const hasSubtypeNodeId = (0, node_opcua_nodeid_1.makeNodeId)(node_opcua_constants_1.ReferenceTypeIds.HasSubtype);
function findSuperType(session, dataTypeId, callback) {
    // let's browse for the SuperType of this object
    const nodeToBrowse = new node_opcua_service_browse_1.BrowseDescription({
        browseDirection: node_opcua_service_browse_1.BrowseDirection.Inverse,
        includeSubtypes: false,
        nodeId: dataTypeId,
        referenceTypeId: hasSubtypeNodeId,
        resultMask
    });
    session.browse(nodeToBrowse, (err, browseResult) => {
        /* istanbul ignore next */
        if (err) {
            return callback(err);
        }
        /* istanbul ignore next */
        if (!browseResult) {
            return callback(new Error("Internal Error"));
        }
        browseResult.references = browseResult.references || /* istanbul ignore next */ [];
        const baseDataType = browseResult.references[0].nodeId;
        callback(null, baseDataType);
    });
}
exports.findSuperType = findSuperType;
function findBasicDataType(session, dataTypeId, callback) {
    if (dataTypeId.identifierType === node_opcua_nodeid_1.NodeIdType.NUMERIC && dataTypeId.value === node_opcua_constants_1.DataTypeIds.Enumeration) {
        // see https://reference.opcfoundation.org/v104/Core/docs/Part3/8.40/
        return callback(null, node_opcua_variant_1.DataType.Int32);
    }
    if (dataTypeId.identifierType === node_opcua_nodeid_1.NodeIdType.NUMERIC && dataTypeId.value <= node_opcua_variant_1.DataType.DiagnosticInfo) {
        // we have a well-known DataType
        const dataTypeName = node_opcua_variant_1.DataType[dataTypeId.value];
        callback(null, dataTypeId.value);
    }
    else {
        findSuperType(session, dataTypeId, (err, baseDataTypeId) => {
            if (err) {
                return callback(err);
            }
            findBasicDataType(session, baseDataTypeId, callback);
        });
    }
}
exports.findBasicDataType = findBasicDataType;
const thenify = require("thenify");
exports.findBasicDataType = thenify.withCallback(exports.findBasicDataType);
exports.findSuperType = thenify.withCallback(exports.findSuperType);
//# sourceMappingURL=find_basic_datatype.js.map