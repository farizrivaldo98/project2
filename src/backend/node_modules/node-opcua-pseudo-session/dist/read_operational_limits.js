"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readOperationLimits = void 0;
/**
 * @module node-opcua-pseudo-session
 */
const node_opcua_nodeid_1 = require("node-opcua-nodeid");
const node_opcua_constants_1 = require("node-opcua-constants");
const node_opcua_service_read_1 = require("node-opcua-service-read");
const serverCapabilitiesIds = [
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxArrayLength,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxStringLength,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxByteStringLength,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MinSupportedSampleRate,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxBrowseContinuationPoints,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxQueryContinuationPoints,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxHistoryContinuationPoints,
    // new in 1.05
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxSessions,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxSubscriptions,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxMonitoredItems,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxSubscriptionsPerSession,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxSelectClauseParameters,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxWhereClauseParameters,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_ConformanceUnits,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxMonitoredItemsPerSubscription
];
function readOperationLimits(session) {
    return __awaiter(this, void 0, void 0, function* () {
        const ids = [
            node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerRead,
            node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerBrowse,
            node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerWrite,
            node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerMethodCall,
            node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerRegisterNodes,
            node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerNodeManagement,
            node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxMonitoredItemsPerCall,
            node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerHistoryReadData,
            node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerHistoryReadEvents,
            node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerHistoryUpdateData,
            node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerHistoryUpdateEvents,
            node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerTranslateBrowsePathsToNodeIds
        ];
        const nodesToRead = ids.map((i) => ({ nodeId: (0, node_opcua_nodeid_1.makeNodeId)(i), attributeId: node_opcua_service_read_1.AttributeIds.Value }));
        const dataValues = yield session.read(nodesToRead);
        function prepare(dataValue) {
            if (dataValue.statusCode.value === 0x00) {
                return dataValue.value.value;
            }
            else {
                console.log("dataValue = ", dataValue.toString());
            }
            return 0;
        }
        // tslint:disable-next-line: object-literal-sort-keys
        const results = {
            maxNodesPerRead: prepare(dataValues[0]),
            maxNodesPerBrowse: prepare(dataValues[1]),
            maxNodesPerWrite: prepare(dataValues[2]),
            maxNodesPerMethodCall: prepare(dataValues[3]),
            maxNodesPerRegisterNodes: prepare(dataValues[4]),
            maxNodesPerNodeManagement: prepare(dataValues[5]),
            maxMonitoredItemsPerCall: prepare(dataValues[6]),
            maxNodesPerHistoryReadData: prepare(dataValues[7]),
            maxNodesPerHistoryReadEvents: prepare(dataValues[8]),
            maxNodesPerHistoryUpdateData: prepare(dataValues[9]),
            maxNodesPerHistoryUpdateEvents: prepare(dataValues[10]),
            maxNodesPerTranslateBrowsePathsToNodeIds: prepare(dataValues[11])
        };
        return results;
    });
}
exports.readOperationLimits = readOperationLimits;
//# sourceMappingURL=read_operational_limits.js.map