"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readNamespaceArray = exports.getArgumentDefinitionHelper = void 0;
/**
 * @module node-opcua-pseudo-session
 */
const node_opcua_assert_1 = require("node-opcua-assert");
const node_opcua_data_model_1 = require("node-opcua-data-model");
const node_opcua_nodeid_1 = require("node-opcua-nodeid");
const node_opcua_service_browse_1 = require("node-opcua-service-browse");
const node_opcua_variant_1 = require("node-opcua-variant");
const node_opcua_constants_1 = require("node-opcua-constants");
function isValid(result) {
    (0, node_opcua_assert_1.assert)(result.statusCode.isGood());
    if (result.value.dataType !== node_opcua_variant_1.DataType.Null) {
        (0, node_opcua_assert_1.assert)(result.value.dataType === node_opcua_variant_1.DataType.ExtensionObject);
        (0, node_opcua_assert_1.assert)(result.value.arrayType === node_opcua_variant_1.VariantArrayType.Array);
    }
    return true;
}
function getArgumentDefinitionHelper(session, methodId, callback) {
    const browseDescription = new node_opcua_service_browse_1.BrowseDescription({
        browseDirection: node_opcua_data_model_1.BrowseDirection.Forward,
        includeSubtypes: true,
        nodeClassMask: 0,
        nodeId: methodId,
        referenceTypeId: (0, node_opcua_nodeid_1.resolveNodeId)("HasProperty"),
        resultMask: (0, node_opcua_data_model_1.makeResultMask)("BrowseName")
    });
    session.browse(browseDescription, (err, browseResult) => {
        /* istanbul ignore next */
        if (err) {
            return callback(err);
        }
        if (!browseResult) {
            return callback(new Error("Invalid"));
        }
        browseResult.references = browseResult.references || [];
        // xx console.log("xxxx results", util.inspect(results, {colors: true, depth: 10}));
        const inputArgumentRefArray = browseResult.references.filter((r) => r.browseName.name === "InputArguments");
        // note : InputArguments property is optional thus may be missing
        const inputArgumentRef = inputArgumentRefArray.length === 1 ? inputArgumentRefArray[0] : null;
        const outputArgumentRefArray = browseResult.references.filter((r) => r.browseName.name === "OutputArguments");
        // note : OutputArguments property is optional thus may be missing
        const outputArgumentRef = outputArgumentRefArray.length === 1 ? outputArgumentRefArray[0] : null;
        let inputArguments = [];
        let outputArguments = [];
        const nodesToRead = [];
        const actions = [];
        if (inputArgumentRef) {
            nodesToRead.push({
                attributeId: node_opcua_data_model_1.AttributeIds.Value,
                nodeId: inputArgumentRef.nodeId
            });
            actions.push((result) => {
                if (isValid(result)) {
                    inputArguments = result.value.value;
                }
            });
        }
        if (outputArgumentRef) {
            nodesToRead.push({
                attributeId: node_opcua_data_model_1.AttributeIds.Value,
                nodeId: outputArgumentRef.nodeId
            });
            actions.push((result) => {
                (0, node_opcua_assert_1.assert)(result.statusCode.isGood());
                if (isValid(result)) {
                    outputArguments = result.value.value;
                }
            });
        }
        if (nodesToRead.length === 0) {
            return callback(null, { inputArguments, outputArguments });
        }
        // now read the variable
        session.read(nodesToRead, (err1, dataValues) => {
            /* istanbul ignore next */
            if (err1) {
                return callback(err1);
            }
            /* istanbul ignore next */
            if (!dataValues) {
                return callback(new Error("Internal Error"));
            }
            dataValues.forEach((dataValue, index) => {
                actions[index].call(null, dataValue);
            });
            callback(null, { inputArguments, outputArguments });
        });
    });
}
exports.getArgumentDefinitionHelper = getArgumentDefinitionHelper;
function readNamespaceArray(session) {
    return __awaiter(this, void 0, void 0, function* () {
        const nodeId = (0, node_opcua_nodeid_1.resolveNodeId)(node_opcua_constants_1.VariableIds.Server_NamespaceArray);
        const dataValue = yield session.read({
            nodeId,
            attributeId: node_opcua_data_model_1.AttributeIds.Value
        });
        if (dataValue.statusCode.isNotGood()) {
            // errorLog("namespaceArray is not populated ! Your server must expose a list of namespaces in node ", nodeId.toString());
            return [];
        }
        return dataValue.value.value;
    });
}
exports.readNamespaceArray = readNamespaceArray;
//# sourceMappingURL=basic_session_interface.js.map