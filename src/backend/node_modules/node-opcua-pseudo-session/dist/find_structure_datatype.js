"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findStructureDataType = void 0;
const node_opcua_constants_1 = require("node-opcua-constants");
const node_opcua_data_model_1 = require("node-opcua-data-model");
const node_opcua_nodeid_1 = require("node-opcua-nodeid");
function findStructureDataType(session, dataTypeName, namespaceIndex) {
    return __awaiter(this, void 0, void 0, function* () {
        let results = yield session.browse({
            browseDirection: node_opcua_data_model_1.BrowseDirection.Forward,
            includeSubtypes: true,
            nodeClassMask: node_opcua_data_model_1.NodeClassMask.DataType,
            referenceTypeId: "HasSubtype",
            resultMask: 0xFF,
            nodeId: (0, node_opcua_nodeid_1.coerceNodeId)(node_opcua_constants_1.DataTypeIds.Structure)
        });
        if (results.statusCode.isNotGood() || !results.references) {
            return null;
        }
        const ref = results.references.find((r) => r.browseName.name === dataTypeName && r.browseName.namespaceIndex === namespaceIndex);
        if (ref) {
            return ref.nodeId;
        }
        while (results.continuationPoint) {
            results = yield session.browseNext(results.continuationPoint, false);
            if (results.statusCode.isNotGood() || !results.references) {
                return null;
            }
            const ref = results.references.find((r) => r.browseName.name === dataTypeName && r.browseName.namespaceIndex === namespaceIndex);
            if (ref) {
                if (results.continuationPoint) {
                    yield session.browseNext(results.continuationPoint, true);
                }
                return ref.nodeId;
            }
        }
        return null;
    });
}
exports.findStructureDataType = findStructureDataType;
//# sourceMappingURL=find_structure_datatype.js.map