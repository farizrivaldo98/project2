"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getChildByBrowseName = void 0;
const node_opcua_data_model_1 = require("node-opcua-data-model");
const node_opcua_debug_1 = require("node-opcua-debug");
const node_opcua_nodeid_1 = require("node-opcua-nodeid");
const warningLog = (0, node_opcua_debug_1.make_warningLog)(__dirname);
function getChildByBrowseName(session, nodeId, name) {
    return __awaiter(this, void 0, void 0, function* () {
        const browseResult = yield session.browse({
            browseDirection: node_opcua_data_model_1.BrowseDirection.Forward,
            includeSubtypes: true,
            nodeId,
            referenceTypeId: (0, node_opcua_nodeid_1.resolveNodeId)("HierarchicalReferences"),
            nodeClassMask: 0,
            resultMask: 0x3f
        });
        if (!browseResult.references || browseResult.statusCode.isNotGood()) {
            throw new Error("Cannot browse node " + name + " " + browseResult.statusCode.toString() + " nodeId = " + nodeId.toString());
        }
        const selectedReference = browseResult.references.find((r) => { var _a; return ((_a = r.browseName.name) === null || _a === void 0 ? void 0 : _a.match(name)) || r.displayName.text.match(name); });
        if (!selectedReference) {
            console.log(browseResult.toString());
            throw new Error("Cannot find node " + name + " from " + nodeId.toString());
        }
        return selectedReference;
    });
}
exports.getChildByBrowseName = getChildByBrowseName;
//# sourceMappingURL=get_child_by_browse_name.js.map