"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.exploreCertificateSigningRequest = exports.readCertificationRequestInfo = void 0;
const asn1_1 = require("./asn1");
const crypto_explore_certificate_1 = require("./crypto_explore_certificate");
function _readExtensionRequest(buffer) {
    const block = (0, asn1_1.readTag)(buffer, 0);
    const inner_blocks = (0, asn1_1._readStruct)(buffer, block);
    const extensions = inner_blocks.map((block1) => (0, crypto_explore_certificate_1._readExtension)(buffer, block1));
    const result = {};
    for (const e of extensions) {
        result[e.identifier.name] = e.value;
    }
    const { basicConstraints, keyUsage, subjectAltName } = result;
    return { basicConstraints, keyUsage, subjectAltName };
}
function readCertificationRequestInfo(buffer, block) {
    const blocks = (0, asn1_1._readStruct)(buffer, block);
    if (blocks.length === 4) {
        const extensionRequestBlock = (0, asn1_1._findBlockAtIndex)(blocks, 0);
        if (!extensionRequestBlock) {
            throw new Error("cannot find extensionRequest block");
        }
        const blocks1 = (0, asn1_1._readStruct)(buffer, extensionRequestBlock);
        const blocks2 = (0, asn1_1._readStruct)(buffer, blocks1[0]);
        const identifier = (0, asn1_1._readObjectIdentifier)(buffer, blocks2[0]);
        if (identifier.name !== "extensionRequest") {
            throw new Error(" Cannot find extension Request in ASN1 block");
        }
        const buf = (0, asn1_1._getBlock)(buffer, blocks2[1]);
        const extensionRequest = _readExtensionRequest(buf);
        return { extensionRequest };
    }
    throw new Error("Invalid CSR or ");
}
exports.readCertificationRequestInfo = readCertificationRequestInfo;
// see https://tools.ietf.org/html/rfc2986 : Certification Request Syntax Specification Version 1.7
function exploreCertificateSigningRequest(crl) {
    const blockInfo = (0, asn1_1.readTag)(crl, 0);
    const blocks = (0, asn1_1._readStruct)(crl, blockInfo);
    const csrInfo = readCertificationRequestInfo(crl, blocks[0]);
    return csrInfo;
}
exports.exploreCertificateSigningRequest = exploreCertificateSigningRequest;
//# sourceMappingURL=explore_certificate_signing_request.js.map