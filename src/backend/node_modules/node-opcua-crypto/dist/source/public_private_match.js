"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.certificateMatchesPrivateKey = exports.publicKeyAndPrivateKeyMatches = void 0;
const explore_private_key_1 = require("./explore_private_key");
const crypto_utils_1 = require("./crypto_utils");
const crypto_explore_certificate_1 = require("./crypto_explore_certificate");
function publicKeyAndPrivateKeyMatches(certificate, privateKey) {
    const i = (0, crypto_explore_certificate_1.exploreCertificate)(certificate);
    const j = (0, explore_private_key_1.explorePrivateKey)(privateKey);
    const modulus1 = i.tbsCertificate.subjectPublicKeyInfo.subjectPublicKey.modulus;
    const modulus2 = j.modulus;
    if (modulus1.length != modulus2.length) {
        return false;
    }
    return modulus1.toString("hex") === modulus2.toString("hex");
}
exports.publicKeyAndPrivateKeyMatches = publicKeyAndPrivateKeyMatches;
/**
 * check that the given certificate matches the given private key
 * @param certificate
 * @param privateKey
 */
function certificateMatchesPrivateKeyPEM(certificate, privateKey, blockSize) {
    const initialBuffer = Buffer.from("Lorem Ipsum");
    const encryptedBuffer = (0, crypto_utils_1.publicEncrypt_long)(initialBuffer, certificate, blockSize, 11);
    const decryptedBuffer = (0, crypto_utils_1.privateDecrypt_long)(encryptedBuffer, privateKey, blockSize);
    const finalString = decryptedBuffer.toString("utf-8");
    return initialBuffer.toString("utf-8") === finalString;
}
function certificateMatchesPrivateKey(certificate, privateKey) {
    const e = (0, explore_private_key_1.explorePrivateKey)(privateKey);
    const blockSize = e.modulus.length;
    const certificatePEM = (0, crypto_utils_1.toPem)(certificate, "CERTIFICATE");
    return certificateMatchesPrivateKeyPEM(certificatePEM, privateKey, blockSize);
}
exports.certificateMatchesPrivateKey = certificateMatchesPrivateKey;
//# sourceMappingURL=public_private_match.js.map