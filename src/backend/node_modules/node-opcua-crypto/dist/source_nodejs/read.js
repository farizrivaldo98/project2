"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readPublicRsaKey = exports.readPrivateRsaKey = exports.setCertificateStore = exports.readPrivateKeyPEM = exports.readPublicKeyPEM = exports.readCertificatePEM = exports.readPrivateKey = exports.readPublicKey = exports.readCertificate = void 0;
const assert = require("assert");
const fs = require("fs");
const path = require("path");
const crypto_1 = require("crypto");
const crypto_utils_1 = require("../source/crypto_utils");
const sshpk = require("sshpk");
function _readPemFile(filename) {
    assert(typeof filename === "string");
    return fs.readFileSync(filename, "ascii");
}
function _readPemOrDerFileAsDER(filename) {
    if (filename.match(/.*\.der/)) {
        return fs.readFileSync(filename);
    }
    const raw_key = _readPemFile(filename);
    return (0, crypto_utils_1.convertPEMtoDER)(raw_key);
}
/**
 * read a DER or PEM certificate from file
 */
function readCertificate(filename) {
    return _readPemOrDerFileAsDER(filename);
}
exports.readCertificate = readCertificate;
/**
 * read a DER or PEM certificate from file
 */
function readPublicKey(filename) {
    if (filename.match(/.*\.der/)) {
        const der = fs.readFileSync(filename);
        return (0, crypto_1.createPublicKey)(der);
    }
    else {
        const raw_key = _readPemFile(filename);
        return (0, crypto_1.createPublicKey)(raw_key);
    }
}
exports.readPublicKey = readPublicKey;
function myCreatePrivateKey(rawKey) {
    // see https://askubuntu.com/questions/1409458/openssl-config-cuases-error-in-node-js-crypto-how-should-the-config-be-updated
    const backup = process.env.OPENSSL_CONF;
    process.env.OPENSSL_CONF = "/dev/null";
    const retValue = (0, crypto_1.createPrivateKey)(rawKey);
    process.env.OPENSSL_CONF = backup;
    return retValue;
}
/**
 * read a DER or PEM certificate from file
 */
function readPrivateKey(filename) {
    if (filename.match(/.*\.der/)) {
        const der = fs.readFileSync(filename);
        return myCreatePrivateKey(der);
    }
    else {
        const raw_key = _readPemFile(filename);
        return myCreatePrivateKey(raw_key);
    }
}
exports.readPrivateKey = readPrivateKey;
function readCertificatePEM(filename) {
    return _readPemFile(filename);
}
exports.readCertificatePEM = readCertificatePEM;
function readPublicKeyPEM(filename) {
    return _readPemFile(filename);
}
exports.readPublicKeyPEM = readPublicKeyPEM;
function readPrivateKeyPEM(filename) {
    return _readPemFile(filename);
}
exports.readPrivateKeyPEM = readPrivateKeyPEM;
let __certificate_store = path.join(__dirname, "../../certificates/");
function setCertificateStore(store) {
    const old_store = __certificate_store;
    __certificate_store = store;
    return old_store;
}
exports.setCertificateStore = setCertificateStore;
/**
 *
 * @param filename
 */
function readPrivateRsaKey(filename) {
    if (filename.substring(0, 1) !== "." && !fs.existsSync(filename)) {
        filename = __certificate_store + filename;
    }
    const content = fs.readFileSync(filename, "ascii");
    const sshKey = sshpk.parsePrivateKey(content, "auto");
    const key = sshKey.toString("pkcs1");
    return (0, crypto_1.createPrivateKey)({ format: "pem", type: "pkcs1", key });
}
exports.readPrivateRsaKey = readPrivateRsaKey;
function readPublicRsaKey(filename) {
    if (filename.substring(0, 1) !== "." && !fs.existsSync(filename)) {
        filename = __certificate_store + filename;
    }
    const content = fs.readFileSync(filename, "ascii");
    const sshKey = sshpk.parseKey(content, "ssh");
    const key = sshKey.toString("pkcs1");
    return (0, crypto_1.createPublicKey)({ format: "pem", type: "pkcs1", key });
}
exports.readPublicRsaKey = readPublicRsaKey;
//# sourceMappingURL=read.js.map