"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resetLock = exports.withLock = exports.defaultStaleDuration = void 0;
const fs = __importStar(require("fs"));
const assert_1 = __importDefault(require("assert"));
exports.defaultStaleDuration = 2 * 60 * 1000; // two minutes
const doDebug = false;
const toSentinel = (lockfile) => lockfile + ".sentinel";
function smartRemove(file) {
    try {
        fs.rmSync(file, { force: false });
        assert_1.default(!fs.existsSync(file));
    }
    catch (err) {
        if (err.message.match(/ENOENT/)) {
            return;
        }
        //    console.log("smartRemove = ", file, err.message);
        throw err;
    }
}
function removeIfTooOld(lockfile, maxStaleDuration) {
    return __awaiter(this, void 0, void 0, function* () {
        const sentinel = toSentinel(lockfile);
        try {
            const stat = fs.statSync(sentinel);
            const now = Date.now();
            if (stat.mtime.getTime() < now - maxStaleDuration) {
                smartRemove(sentinel);
                smartRemove(lockfile);
                return false;
            }
        }
        catch (err) {
            if (err.message.match(/ENOENT/)) {
                // sentinel file doesn't not exists , or is locked
                try {
                    smartRemove(lockfile);
                }
                catch (err) {
                    if (err.message.match(/EPERM/)) {
                        // file is really locked ; it cannot be removed :
                        return true;
                    }
                }
                return false;
            }
            if (err.message.match(/EPERM/)) {
                // file is really locked ; it cannot be removed :
                return true;
            }
            // unexpected case
            console.log(err);
        }
        finally {
        }
        return false;
    });
}
const _safeGuard = {};
function pause(duration) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve) => setTimeout(resolve, duration));
    });
}
const pulse = (sentinel, interval, data) => {
    if (data.active) {
        fs.writeFileSync(sentinel, Date.now().toString());
        if (data.active) {
            data.id = setTimeout(pulse, interval, sentinel, interval, data);
        }
    }
};
let lockCount = 0;
function lock(options) {
    return __awaiter(this, void 0, void 0, function* () {
        options = adjustOptions(options);
        if (options._id === undefined && _safeGuard[options.lockfile]) {
            throw new Error("Lock rentrancy detected");
        }
        options._id = 1;
        if (_safeGuard[options.lockfile]) {
            // already lock  by a internal process : lets wait"
            yield pause(100);
            return lock(options);
        }
        const reallyLocked = yield removeIfTooOld(options.lockfile, options.maxStaleDuration);
        if (reallyLocked) {
            yield pause(100);
            return lock(options);
        }
        const sentinel = toSentinel(options.lockfile);
        return new Promise((resolve, reject) => 
        // let's make a attempt to open the lock file with exclusive access
        fs.open(options.lockfile, "wx+", (error, fd) => {
            if (error) {
                // we cannot acquire the lock, let's try again a little bit later
                pause(options.retryInterval).then(() => lock(options).then(resolve).catch(reject));
            }
            else {
                /* first thing to do here */
                fs.closeSync(fd);
                /* istanbul ignore next */
                if (_safeGuard[options.lockfile]) {
                    // throw new Error("Error in lock");
                    /// argh! shit raise condition!
                    pause(options.retryInterval).then(() => lock(options).then(resolve).catch(reject));
                    return;
                }
                const data = { active: true };
                _safeGuard[options.lockfile] = data;
                pulse(sentinel, options.maxStaleDuration / 3, data);
                // istanbul ignore next
                if (doDebug) {
                    console.log("Locked !", lockCount);
                }
                lockCount += 1;
                resolve();
            }
        }));
    });
}
function unlock(options) {
    const data = _safeGuard[options.lockfile];
    // istanbul ignore next
    if (!data) {
        throw new Error("File is not locked" + options.lockfile);
    }
    if (data.id) {
        clearTimeout(data.id);
        data.id = undefined;
    }
    const sentinel = toSentinel(options.lockfile);
    data.active = false;
    lockCount -= 1;
    // istanbul ignore next
    if (doDebug) {
        console.log('unlocked', lockCount);
    }
    delete _safeGuard[options.lockfile];
    smartRemove(sentinel);
    smartRemove(options.lockfile);
}
function withLock(options, action) {
    return __awaiter(this, void 0, void 0, function* () {
        yield lock(options);
        try {
            return yield action();
        }
        finally {
            try {
                unlock(options);
            }
            catch (err) {
                // istanbul ignore next
                console.log(err);
            }
        }
    });
}
exports.withLock = withLock;
function adjustOptions(options) {
    options.maxStaleDuration =
        !options.maxStaleDuration || options.maxStaleDuration <= 100
            ? exports.defaultStaleDuration
            : options.maxStaleDuration;
    options.retryInterval = Math.min(Math.floor(options.maxStaleDuration / 2.5), !options.retryInterval || options.retryInterval <= 0
        ? 100
        : options.retryInterval);
    return options;
}
function resetLock(lockfile) {
    smartRemove(lockfile);
    smartRemove(toSentinel(lockfile));
}
exports.resetLock = resetLock;
//# sourceMappingURL=lock.js.map